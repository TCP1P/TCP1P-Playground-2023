from sage.all import *
from Crypto.Util.number import long_to_bytes

n = 4685548727794445565448864696702479407866197868469497924257877258089260788023674939028762433492017692077631406495204464426387174384314082437120499583152879447446415664559242235477900605810573087660604745364555811181517561149282727629162563305417632105508207113918591778179152733281142784038939080743948685386644641244058746501089534829334119599851418711717218440697514560156554953155649
e = 65537
c = 4125642289323285892060511830291842062107377801115457102782306654261970254997198961370577450286973489107521536101080537235257723766059201956339953516713455528724942208437637965936554225797609177957350328596848145083092943268849186384194356813663801049433378420618682270787874598464352781768766381624041135979077727869400383633685815256856708566694682754360719022529860074009721211062580

# because n is contain some power of a prime
# you can use nth_root to get the correct prime
# and after some testing you can find that n is 10th power of a prime
# and you can decrypt RSA if you know factorization of n
p = int(ZZ(n).nth_root(10))
phi = (p - 1) * p ** 9
d = pow(e, -1, phi)
m = pow(c, d, n)
print(long_to_bytes(m))